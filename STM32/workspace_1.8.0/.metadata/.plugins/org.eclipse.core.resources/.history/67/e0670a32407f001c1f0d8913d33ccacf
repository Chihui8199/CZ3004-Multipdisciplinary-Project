/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "oled.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

UART_HandleTypeDef huart3;

/* Definitions for BlinkLed */
osThreadId_t BlinkLedHandle;
const osThreadAttr_t BlinkLed_attributes = {
  .name = "BlinkLed",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for DisplayOLED */
osThreadId_t DisplayOLEDHandle;
const osThreadAttr_t DisplayOLED_attributes = {
  .name = "DisplayOLED",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for LeftMotorTask */
osThreadId_t LeftMotorTaskHandle;
const osThreadAttr_t LeftMotorTask_attributes = {
  .name = "LeftMotorTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for RightMotorTask */
osThreadId_t RightMotorTaskHandle;
const osThreadAttr_t RightMotorTask_attributes = {
  .name = "RightMotorTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for LeftEncoder */
osThreadId_t LeftEncoderHandle;
const osThreadAttr_t LeftEncoder_attributes = {
  .name = "LeftEncoder",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for RightEncoder */
osThreadId_t RightEncoderHandle;
const osThreadAttr_t RightEncoder_attributes = {
  .name = "RightEncoder",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for ServoMotor */
osThreadId_t ServoMotorHandle;
const osThreadAttr_t ServoMotor_attributes = {
  .name = "ServoMotor",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for UART */
osThreadId_t UARTHandle;
const osThreadAttr_t UART_attributes = {
  .name = "UART",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for mforward */
osThreadId_t mforwardHandle;
const osThreadAttr_t mforward_attributes = {
  .name = "mforward",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM8_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART3_UART_Init(void);
void led(void *argument);
void display(void *argument);
void left_motor(void *argument);
void right_motor(void *argument);
void left_encoder_task(void *argument);
void right_encoder_task(void *argument);
void servo(void *argument);
void uart(void *argument);
void forward(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t aRxBuffer[20];
double diff1, diff2 =0;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM8_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM1_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  OLED_Init();

  HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,10);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BlinkLed */
  BlinkLedHandle = osThreadNew(led, NULL, &BlinkLed_attributes);

  /* creation of DisplayOLED */
  DisplayOLEDHandle = osThreadNew(display, NULL, &DisplayOLED_attributes);

  /* creation of LeftMotorTask */
  //LeftMotorTaskHandle = osThreadNew(left_motor, NULL, &LeftMotorTask_attributes);

  /* creation of RightMotorTask */
  //RightMotorTaskHandle = osThreadNew(right_motor, NULL, &RightMotorTask_attributes);

  /* creation of LeftEncoder */
  LeftEncoderHandle = osThreadNew(left_encoder_task, NULL, &LeftEncoder_attributes);

  /* creation of RightEncoder */
  RightEncoderHandle = osThreadNew(right_encoder_task, NULL, &RightEncoder_attributes);

  /* creation of ServoMotor */
  //ServoMotorHandle = osThreadNew(servo, NULL, &ServoMotor_attributes);

  /* creation of UART */
  UARTHandle = osThreadNew(uart, NULL, &UART_attributes);

  /* creation of mforward */
  mforwardHandle = osThreadNew(forward, NULL, &mforward_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 160;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1000;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 10;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 10;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 10;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 10;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 7199;
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RES_Pin|OLED_DC_Pin
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RES_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RES_Pin|OLED_DC_Pin
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	//Prevent unused argument(s) compilation warning
	UNUSED(huart);

	HAL_UART_Transmit(&huart3,(uint8_t *) aRxBuffer,10,0xFFFF);
}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_led */
/**
  * @brief  Function implementing the BlinkLed thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_led */
void led(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
    osDelay(3000);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_display */
/**
* @brief Function implementing the DisplayOLED thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_display */
void display(void *argument)
{
  /* USER CODE BEGIN display */
	uint8_t hello[20] = "Hello World!\0";
  /* Infinite loop */
  for(;;)
  {
	  sprintf(hello, "%s\0", aRxBuffer);
	  OLED_ShowString(10,10,hello); //Write to memory
	  OLED_Refresh_Gram();

    osDelay(1000);
  }
  /* USER CODE END display */
}

/* USER CODE BEGIN Header_left_motor */
/**
* @brief Function implementing the LeftMotorTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_left_motor */
void left_motor(void *argument)
{
  /* USER CODE BEGIN left_motor */
	uint16_t leftpwmVal = 0;

	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
	/* Infinite loop */
	for(;;)
	{
	  // left motor forward
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,leftpwmVal); //Modify the comparison value for the duty cycle
	  osDelay(10);

	  // left motor backward
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,leftpwmVal); //Modify the comparison value for the duty cycle
	  osDelay(10);

	  /*//Backward
	  while(leftpwmVal < 4000){
		  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
		  leftpwmVal++;
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,leftpwmVal); //Modify the comparison value for the duty cycle
		  osDelay(10);
	  }*/

	  /*//Forward
	  while(leftpwmVal>0){
		  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
		  leftpwmVal--;
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,leftpwmVal); //Modify the comparison value for the duty cycle
		  osDelay(10);
	  }*/
	osDelay(1);
	}
  /* USER CODE END left_motor */
}

/* USER CODE BEGIN Header_right_motor */
/**
* @brief Function implementing the RightMotorTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_right_motor */
void right_motor(void *argument)
{
  /* USER CODE BEGIN right_motor */
	uint16_t rightpwmVal = 1000;

	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
  /* Infinite loop */
  for(;;)
  {
	  //right motor forward
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,rightpwmVal); //Modify the comparison value for the duty cycle
	  osDelay(10);

	  //right motor backward
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,rightpwmVal); //Modify the comparison value for the duty cycle
	  osDelay(10);

	  /*//Backward
	  while(rightpwmVal < 4000){
		  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
		  rightpwmVal++;
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,rightpwmVal); //Modify the comparison value for the duty cycle
		  osDelay(10);
	  }*/

	  /*//Forward
	  while(rightpwmVal>0){
		  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
		  rightpwmVal--;
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,rightpwmVal); //Modify the comparison value for the duty cycle
		  osDelay(10);
	  }*/
    osDelay(1);
  }
  /* USER CODE END right_motor */
}

/* USER CODE BEGIN Header_left_encoder_task */
/**
* @brief Function implementing the LeftEncoder thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_left_encoder_task */
void left_encoder_task(void *argument)
{
  /* USER CODE BEGIN left_encoder_task */
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);

	int count1, count2;
	uint32_t tick;
	uint16_t dir;

	count1 = __HAL_TIM_GET_COUNTER(&htim2);
	tick = HAL_GetTick();
	uint8_t hello[20];

  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GetTick() - tick > 1000){
		  count2 = __HAL_TIM_GET_COUNTER(&htim2);
		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
			  if (count2 < count1){
				  diff1 = count1 - count2;
			  }
			  else diff1 = (65535 - count2) + count1;
		  }
		  else{
			  if (count2 > count1){
				  diff1 = count2 - count1;
			  }
			  else diff1 = (65535 - count1) + count2;
		  }

		  sprintf(hello, "Speed:%5d", diff1); //Show speed
		  OLED_ShowString(10,20,hello);

		  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2); //Show direction
		  sprintf(hello, "Direction:%5d", dir);
		  OLED_ShowString(10,30,hello);

		  count1 = __HAL_TIM_GET_COUNTER(&htim2);
		  tick = HAL_GetTick();
	  }
    osDelay(1);
  }
  /* USER CODE END left_encoder_task */
}

/* USER CODE BEGIN Header_right_encoder_task */
/**
* @brief Function implementing the RightEncoder thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_right_encoder_task */
void right_encoder_task(void *argument)
{
  /* USER CODE BEGIN right_encoder_task */
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);

	int count1, count2;
	uint32_t tick;
	uint16_t dir;

	count1 = __HAL_TIM_GET_COUNTER(&htim3);
	tick = HAL_GetTick();
	uint8_t hello[20];
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GetTick() - tick > 1000){
		  count2 = __HAL_TIM_GET_COUNTER(&htim3);
		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
			  if (count2 < count1){
				  diff2 = count1 - count2;
			  }
			  else diff2 = (65535 - count2) + count1;
		  }
		  else{
			  if (count2 > count1){
				  diff2 = count2 - count1;
			  }
			  else diff2 = (65535 - count1) + count2;
		  }

		  sprintf(hello, "Speed:%5d", diff2); //Show speed
		  OLED_ShowString(10,40,hello);

		  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3); //Show direction
		  sprintf(hello, "Direction:%5d", dir);
		  OLED_ShowString(10,50,hello);

		  count1 = __HAL_TIM_GET_COUNTER(&htim3);
		  tick = HAL_GetTick();
	  }
    osDelay(1);
  }
  /* USER CODE END right_encoder_task */
}

/* USER CODE BEGIN Header_servo */
/**
* @brief Function implementing the ServoMotor thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo */
void servo(void *argument)
{
  /* USER CODE BEGIN servo */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
  /* Infinite loop */
  for(;;)
  {
	htim1.Instance->CCR4 = 100;  //Extreme right
    osDelay(5000);
    htim1.Instance->CCR4 = 150; //Center
    osDelay(5000);
	htim1.Instance->CCR4 = 200; //Extreme left
	osDelay(5000);
	htim1.Instance->CCR4 = 150; //Center
	osDelay(5000);
  }
  /* USER CODE END servo */
}

/* USER CODE BEGIN Header_uart */
/**
* @brief Function implementing the UART thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart */
void uart(void *argument)
{
  /* USER CODE BEGIN uart */
	uint8_t ch = 'A';
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,0xFFFF);
	if (ch<'Z') ch++;
	else ch = 'A';
    osDelay(1);
  }
  /* USER CODE END uart */
}

/* USER CODE BEGIN Header_forward */
/**
* @brief Function implementing the mforward thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_forward */
void forward(void *argument)
{
  /* USER CODE BEGIN forward */
	double rightpwmVal = 500;
	double leftpwmVal = 500;

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);

  /* Infinite loop */
  for(;;)
  {
	  htim1.Instance->CCR4 = 150; //Center

	  //right motor forward
	  HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,rightpwmVal); //Modify the comparison value for the duty cycle
	  osDelay(10);

	  // left motor forward
	  HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,leftpwmVal); //Modify the comparison value for the duty cycle
	  osDelay(10);

	  if (diff1<diff2) rightpwmVal -= 10;
	  else if (diff2<diff1) rightpwmVal += 10;

    osDelay(1);
  }
  /* USER CODE END forward */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

